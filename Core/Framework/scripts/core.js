var core = core || {};
(function ($) {

    /* Application paths *****************************************/

    //Current application root path (including virtual directory if exists).
    core.appPath = core.appPath || '/';

    core.pageLoadTime = new Date();

    //Converts given path to absolute path using core.appPath variable.
    core.toAbsAppPath = function (path) {
        if (path.indexOf('/') === 0) {
            path = path.substring(1);
        }

        return core.appPath + path;
    };

    /* LOCALIZATION ***********************************************/
    //Implements Localization API that simplifies usage of localization scripts generated by Core.

    core.localization = core.localization || {};

    core.localization.localize = function (key, sourceName) {
        sourceName = sourceName || core.localization.defaultSourceName;

        var source = core.localization.values[sourceName];

        if (!source) {
            core.log.warn('Could not find localization source: ' + sourceName);
            return key;
        }

        var value = source[key];
        if (value === undefined) {
            return key;
        }

        var copiedArguments = Array.prototype.slice.call(arguments, 0);
        copiedArguments.splice(1, 1);
        copiedArguments[0] = value;

        return core.utils.formatString.apply(this, copiedArguments);
    };

    core.localization.getSource = function (sourceName) {
        return function (key) {
            var copiedArguments = Array.prototype.slice.call(arguments, 0);
            copiedArguments.splice(1, 0, sourceName);
            return core.localization.localize.apply(this, copiedArguments);
        };
    };

    core.localization.isCurrentCulture = function (name) {
        return core.localization.currentCulture
            && core.localization.currentCulture.name
            && core.localization.currentCulture.name.indexOf(name) === 0;
    };

    core.localization.defaultSourceName = null;
    core.localization.coreWeb = core.localization.getSource('CoreWeb');

    /* AUTHORIZATION **********************************************/
    //Implements Authorization API that simplifies usage of authorization scripts generated by Core.

    core.auth = core.auth || {};

    core.auth.allPermissions = core.auth.allPermissions || {};

    core.auth.grantedPermissions = core.auth.grantedPermissions || {};

    //Deprecated. Use core.auth.isGranted instead.
    core.auth.hasPermission = function (permissionName) {
        return core.auth.isGranted.apply(this, arguments);
    };

    //Deprecated. Use core.auth.isAnyGranted instead.
    core.auth.hasAnyOfPermissions = function () {
        return core.auth.isAnyGranted.apply(this, arguments);
    };

    //Deprecated. Use core.auth.areAllGranted instead.
    core.auth.hasAllOfPermissions = function () {
        return core.auth.areAllGranted.apply(this, arguments);
    };

    core.auth.isGranted = function (permissionName) {
        return core.auth.allPermissions[permissionName] !== undefined && core.auth.grantedPermissions[permissionName] !== undefined;
    };

    core.auth.isAnyGranted = function () {
        if (!arguments || arguments.length <= 0) {
            return true;
        }

        for (var i = 0; i < arguments.length; i++) {
            if (core.auth.isGranted(arguments[i])) {
                return true;
            }
        }

        return false;
    };

    core.auth.areAllGranted = function () {
        if (!arguments || arguments.length <= 0) {
            return true;
        }

        for (var i = 0; i < arguments.length; i++) {
            if (!core.auth.isGranted(arguments[i])) {
                return false;
            }
        }

        return true;
    };

    /* FEATURE SYSTEM *********************************************/
    //Implements Features API that simplifies usage of feature scripts generated by Core.

    core.features = core.features || {};

    core.features.allFeatures = core.features.allFeatures || {};

    core.features.get = function (name) { return core.features.allFeatures[name]; };

    core.features.getValue = function (name) {
        var feature = core.features.get(name);
        if (feature === undefined) {
            return undefined;
        }
        return feature.value;
    };

    core.features.isEnabled = function (name) {
        var value = core.features.getValue(name);
        return value === 'true' || value === 'True';
    };

    /* SETTINGS **************************************************/
    //Implements Settings API that simplifies usage of setting scripts generated by Core.

    core.setting = core.setting || {};

    core.setting.values = core.setting.values || {};

    core.setting.get = function (name) {
        return core.setting.values[name];
    };

    core.setting.getBoolean = function (name) {
        var value = core.setting.get(name);
        return value === 'true' || value === 'True';
    };

    core.setting.getInt = function (name) {
        return parseInt(core.setting.values[name], 10);
    };

    /* REALTIME NOTIFICATIONS ************************************/

    core.notifications = core.notifications || {};

    core.notifications.severity = {
        INFO: 0,
        SUCCESS: 1,
        WARN: 2,
        ERROR: 3,
        FATAL: 4
    };

    core.notifications.userNotificationState = {
        UNREAD: 0,
        READ: 1
    };

    core.notifications.getUserNotificationStateAsString = function (userNotificationState) {
        switch (userNotificationState) {
            case core.notifications.userNotificationState.READ:
                return 'READ';
            case core.notifications.userNotificationState.UNREAD:
                return 'UNREAD';
            default:
                core.log.warn('Unknown user notification state value: ' + userNotificationState);
                return '?';
        }
    };

    core.notifications.getUiNotifyFuncBySeverity = function (severity) {
        switch (severity) {
            case core.notifications.severity.SUCCESS:
                return core.notify.success;
            case core.notifications.severity.WARN:
                return core.notify.warn;
            case core.notifications.severity.ERROR:
                return core.notify.error;
            case core.notifications.severity.FATAL:
                return core.notify.fatal;
            case core.notifications.severity.INFO:
            default:
                return core.notify.info;
        }
    };

    core.notifications.messageFormatters = {};

    core.notifications.messageFormatters['Core.Notifications.MessageNotificationData'] = function (userNotification) {
        return userNotification.notification.data.message;
    };

    core.notifications.messageFormatters['Core.Notifications.LocalizableMessageNotificationData'] = function (userNotification) {
        var localizedMessage = core.localization.localize(
            userNotification.notification.data.message.name,
            userNotification.notification.data.message.sourceName
        );

        if (userNotification.notification.data.properties) {
            if ($) {
                //Prefer to use jQuery if possible
                $.each(userNotification.notification.data.properties, function (key, value) {
                    localizedMessage = localizedMessage.replace('{' + key + '}', value);
                });
            } else {
                //alternative for $.each
                var properties = Object.keys(userNotification.notification.data.properties);
                for (var i = 0; i < properties.length; i++) {
                    localizedMessage = localizedMessage.replace('{' + properties[i] + '}', userNotification.notification.data.properties[properties[i]]);
                }
            }
        }

        return localizedMessage;
    };

    core.notifications.getFormattedMessageFromUserNotification = function (userNotification) {
        var formatter = core.notifications.messageFormatters[userNotification.notification.data.type];
        if (!formatter) {
            core.log.warn('No message formatter defined for given data type: ' + userNotification.notification.data.type);
            return '?';
        };

        if (!core.utils.isFunction(formatter)) {
            core.log.warn('Message formatter should be a function! It is invalid for data type: ' + userNotification.notification.data.type);
            return '?';
        };

        return formatter(userNotification);
    };

    core.notifications.showUiNotifyForUserNotification = function (userNotification, options) {
        var message = core.notifications.getFormattedMessageFromUserNotification(userNotification);
        var uiNotifyFunc = core.notifications.getUiNotifyFuncBySeverity(userNotification.notification.severity);
        uiNotifyFunc(message, undefined, options);
    };

    /* LOGGING ***************************************************/
    //Implements Logging API that provides secure & controlled usage of console.log

    core.log = core.log || {};

    core.log.levels = {
        DEBUG: 1,
        INFO: 2,
        WARN: 3,
        ERROR: 4,
        FATAL: 5
    };

    core.log.level = core.log.levels.DEBUG;

    core.log.log = function (logObject, logLevel) {
        if (!window.console || !window.console.log) {
            return;
        }

        if (logLevel !== undefined && logLevel < core.log.level) {
            return;
        }

    };

    core.log.debug = function (logObject) {
        core.log.log('DEBUG: ', core.log.levels.DEBUG);
        core.log.log(logObject, core.log.levels.DEBUG);
    };

    core.log.info = function (logObject) {
        core.log.log('INFO: ', core.log.levels.INFO);
        core.log.log(logObject, core.log.levels.INFO);
    };

    core.log.warn = function (logObject) {
        core.log.log('WARN: ', core.log.levels.WARN);
        core.log.log(logObject, core.log.levels.WARN);
    };

    core.log.error = function (logObject) {
        core.log.log('ERROR: ', core.log.levels.ERROR);
        core.log.log(logObject, core.log.levels.ERROR);
    };

    core.log.fatal = function (logObject) {
        core.log.log('FATAL: ', core.log.levels.FATAL);
        core.log.log(logObject, core.log.levels.FATAL);
    };

    /* NOTIFICATION *********************************************/
    //Defines Notification API, not implements it

    core.notify = core.notify || {};

    core.notify.success = function (message, title, options) {
        core.log.warn('core.notify.success is not implemented!' + '' + message + '' + title + '' + options);
    };

    core.notify.info = function (message, title, options) {
        core.log.warn('core.notify.info is not implemented!' + '' + message + '' + title + '' + options);
    };

    core.notify.warn = function (message, title, options) {
        core.log.warn('core.notify.warn is not implemented!' + '' + message + '' + title + '' + options);
    };

    core.notify.error = function (message, title, options) {
        core.log.warn('core.notify.error is not implemented!' + '' + message + '' + title + '' + options);
    };

    core.notify.fatal = function (message, title, options) {
        core.log.warn('core.notify.fatal is not implemented!' + '' + message + '' + title + '' + options);
    };

    /* MESSAGE **************************************************/
    //Defines Message API, not implements it

    core.message = core.message || {};

    var showMessage = function (message, title) {

        if (!$) {
            core.log.warn('core.message can not return promise since jQuery is not defined!' + message + ' ' + title);
            return null;
        }

        return $.Deferred(function ($dfd) {
            $dfd.resolve();
        });
    };

    core.message.info = function (message, title) {
        core.log.warn('core.message.info is not implemented!');
        return showMessage(message, title);
    };

    core.message.success = function (message, title) {
        core.log.warn('core.message.success is not implemented!');
        return showMessage(message, title);
    };

    core.message.warn = function (message, title) {
        core.log.warn('core.message.warn is not implemented!');
        return showMessage(message, title);
    };

    core.message.error = function (message, title) {
        core.log.warn('core.message.error is not implemented!');
        return showMessage(message, title);
    };

    core.message.confirm = function (message, titleOrCallback, callback) {
        core.log.warn('core.message.confirm is not implemented!');

        if (titleOrCallback && !(typeof titleOrCallback === 'string')) {
            callback = titleOrCallback;
        }

        var result = confirm(message);
        callback && callback(result);

        if (!$) {
            core.log.warn('core.message can not return promise since jQuery is not defined!');
            return null;
        }

        return $.Deferred(function ($dfd) {
            $dfd.resolve();
        });
    };

    /* UI *******************************************************/

    core.ui = core.ui || {};

    /* UI BLOCK */
    //Defines UI Block API, not implements it

    core.ui.block = function (elm) {
        core.log.warn('core.ui.block is not implemented!' + elm);
    };

    core.ui.unblock = function (elm) {
        core.log.warn('core.ui.unblock is not implemented!' + elm);
    };

    /* UI BUSY */
    //Defines UI Busy API, not implements it

    core.ui.setBusy = function (elm, optionsOrPromise) {
        core.log.warn('core.ui.setBusy is not implemented! ' + elm + ' ' + optionsOrPromise);
    };

    core.ui.clearBusy = function (elm) {
        core.log.warn('core.ui.clearBusy is not implemented! ' + elm);
    };

    /* SIMPLE EVENT BUS *****************************************/

    core.event = (function () {

        var _callbacks = {};

        var on = function (eventName, callback) {
            if (!_callbacks[eventName]) {
                _callbacks[eventName] = [];
            }

            _callbacks[eventName].push(callback);
        };

        var off = function (eventName, callback) {
            var callbacks = _callbacks[eventName];
            if (!callbacks) {
                return;
            }

            var index = -1;
            for (var i = 0; i < callbacks.length; i++) {
                if (callbacks[i].name === callback.name) {
                    index = i;
                    break;
                }
            }

            if (index < 0) {
                return;
            }

            _callbacks[eventName].splice(index, 1);
        };

        var trigger = function (eventName) {
            var callbacks = _callbacks[eventName];
            if (!callbacks || !callbacks.length) {
                return;
            }

            var args = Array.prototype.slice.call(arguments, 1);
            for (var i = 0; i < callbacks.length; i++) {
                callbacks[i].apply(this, args);
            }
        };

        // Public interface ///////////////////////////////////////////////////

        return {
            on: on,
            off: off,
            trigger: trigger
        };
    })();


    /* UTILS ***************************************************/

    core.utils = core.utils || {};

    /* Creates a name namespace.
    *  first argument (root) must be defined first
    ************************************************************/
    core.utils.createNamespace = function (root, ns) {
        var parts = ns.split('.');
        for (var i = 0; i < parts.length; i++) {
            if (typeof root[parts[i]] === 'undefined') {
                root[parts[i]] = {};
            }

            root = root[parts[i]];
        }

        return root;
    };

    /* Formats a string just like string.format in C#.
    *  Example:
    *  _formatString('Hello {0}','Halil') = 'Hello Halil'
    ************************************************************/
    core.utils.formatString = function () {
        if (arguments.length < 1) {
            return null;
        }

        var str = arguments[0];

        for (var i = 1; i < arguments.length; i++) {
            var placeHolder = '{' + (i - 1) + '}';
            str = str.replace(placeHolder, arguments[i]);
        }

        return str;
    };

    core.utils.toPascalCase = function (str) {
        if (!str || !str.length) {
            return str;
        }

        if (str.length === 1) {
            return str.charAt(0).toUpperCase();
        }

        return str.charAt(0).toUpperCase() + str.substr(1);
    };

    core.utils.toCamelCase = function (str) {
        if (!str || !str.length) {
            return str;
        }

        if (str.length === 1) {
            return str.charAt(0).toLowerCase();
        }

        return str.charAt(0).toLowerCase() + str.substr(1);
    };

    core.utils.truncateString = function (str, maxLength) {
        if (!str || !str.length || str.length <= maxLength) {
            return str;
        }

        return str.substr(0, maxLength);
    };

    core.utils.truncateStringWithPostfix = function (str, maxLength, postfix) {
        postfix = postfix || '...';

        if (!str || !str.length || str.length <= maxLength) {
            return str;
        }

        if (maxLength <= postfix.length) {
            return postfix.substr(0, maxLength);
        }

        return str.substr(0, maxLength - postfix.length) + postfix;
    };

    core.utils.isFunction = function (obj) {
        if ($) {
            //Prefer to use jQuery if possible
            return $.isFunction(obj);
        }

        //alternative for $.isFunction
        return !!(obj && obj.constructor && obj.call && obj.apply);
    };

    /* TIMING *****************************************/
    core.timing = core.timing || {};

    core.timing.utcClockProvider = (function () {

        var toUtc = function (date) {
            return Date.UTC(
                date.getUTCFullYear()
                , date.getUTCMonth()
                , date.getUTCDate()
                , date.getUTCHours()
                , date.getUTCMinutes()
                , date.getUTCSeconds()
                , date.getUTCMilliseconds()
            );
        };

        var now = function () {
            return new Date();
        };

        var normalize = function (date) {
            if (!date) {
                return date;
            }

            return new Date(toUtc(date));
        };

        // Public interface ///////////////////////////////////////////////////

        return {
            now: now,
            normalize: normalize
        };
    })();

    core.timing.localClockProvider = (function () {

        var toLocal = function (date) {
            return new Date(
                date.getFullYear()
                , date.getMonth()
                , date.getDate()
                , date.getHours()
                , date.getMinutes()
                , date.getSeconds()
                , date.getMilliseconds()
            );
        };

        var now = function () {
            return toLocal(new Date());
        };

        var normalize = function (date) {
            if (!date) {
                return date;
            }

            return toLocal(date);
        };

        // Public interface ///////////////////////////////////////////////////

        return {
            now: now,
            normalize: normalize
        };
    })();

    core.timing.convertToUserTimezone = function (date) {
        var localTime = date.getTime();
        var utcTime = localTime + (date.getTimezoneOffset() * 60000);
        var targetTime = parseInt(utcTime, 10) + parseInt(core.timing.timeZoneInfo.windows.currentUtcOffsetInMilliseconds, 10);
        return new Date(targetTime);
    };

    /* CLOCK *****************************************/
    core.clock = core.clock || {};

    core.clock.now = function () {
        if (core.clock.provider) {
            return core.clock.provider.now();
        }

        return new Date();
    };

    core.clock.normalize = function (date) {
        if (core.clock.provider) {
            return core.clock.provider.normalize(date);
        }

        return date;
    };

    core.clock.provider = core.timing.localClockProvider;

})(jQuery);
